package org.cibertec.edu.pe.controller;

import java.util.ArrayList;
import java.util.List;



import org.cibertec.edu.pe.model.Detalle;
import org.cibertec.edu.pe.model.Producto;
import org.cibertec.edu.pe.model.Venta;
import org.cibertec.edu.pe.repository.IDetalleRepository;
import org.cibertec.edu.pe.repository.IProductoRepository;
import org.cibertec.edu.pe.repository.IVentaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

@Controller
@SessionAttributes({"carrito", "total"})
public class ProductoController {
	@Autowired
	private IProductoRepository productoRepository;
	@Autowired
	private IVentaRepository ventaRepository;
	@Autowired
	private IDetalleRepository detalleRepository;
	
	@GetMapping("/index")
	public String listado(Model model) {
		List<Producto> lista = new ArrayList<>();
		lista = productoRepository.findAll();
		model.addAttribute("productos", lista);
		return "index";
	}
	
	
	@GetMapping("/agregar/{idProducto}")
    public String agregar(Model model, @PathVariable(name = "idProducto", required = true) int idProducto,
                          @ModelAttribute("carrito") List<Detalle> carrito,
                          @ModelAttribute("total") double total) {
        // Obtener el producto por su id
        Producto producto = productoRepository.findById(idProducto).orElse(null);

        if (producto != null) {
            // Verificar si el producto ya está en el carrito
            boolean productoExistente = false;
            for (Detalle detalle : carrito) {
                if (detalle.getProducto().getIdProducto() == idProducto) {
                    // Si ya existe, aumentar la cantidad
                    detalle.setCantidad(detalle.getCantidad() + 1);
                    productoExistente = true;
                    break;
                }
            }

            // Si no existe, agregarlo al carrito
            if (!productoExistente) {
                Detalle nuevoDetalle = new Detalle();
                nuevoDetalle.setProducto(producto);
                nuevoDetalle.setCantidad(1);
                carrito.add(nuevoDetalle);
            }

            // Actualizar el total
            total += producto.getPrecio();
        }

        // Redirigir a la página principal
        return "redirect:/index";
    }
	
	@GetMapping("/carrito")
	public String carrito() {
		return "carrito";
	}
	
	
	@GetMapping("/pagar")
    public String realizarPago(@ModelAttribute("carrito") List<Detalle> carrito, Model model) {
        // Guardar información de productos adquiridos en las tablas correspondientes
        for (Detalle detalle : carrito) {
            detalleRepository.save(detalle);
        }
        // Limpiar carrito después de realizar el pago
        carrito.clear();
        model.addAttribute("mensaje", "¡La compra se ha realizado con éxito!");
        return "mensaje";
    }
	
	@PostMapping("/actualizarCarrito")
	public String actualizarCarrito(Model model) {
	    // Codigo para actualizar el carrito
	    return "carrito";
	}
	
	// Inicializacion de variable de la sesion
	@ModelAttribute("carrito")
	public List<Detalle> getCarrito() {
		return new ArrayList<Detalle>();
	}
	
	@ModelAttribute("total")
	public double getTotal() {
		return 0.0;
	
	}
	
	
	@PostMapping("/guardar")
	public String guardar(@ModelAttribute Producto nuevoProducto) {
	    // Validaciones u lógica de negocio antes de guardar
	    // ...

	    // Guardar el nuevo producto en la base de datos
	    productoRepository.save(nuevoProducto);

	    return "redirect:/index";
	}
	
	@Controller
	@SessionAttributes({"carrito", "total"})
	public class CarritoController {

	    @GetMapping("/eliminar/{idProducto}")
	    public String eliminarProducto(@PathVariable(name = "idProducto") int idProducto,
	                                   @ModelAttribute("carrito") List<Detalle> carrito,
	                                   @ModelAttribute("total") double total) {
	       
	        carrito.removeIf(detalle -> detalle.getProducto().getId() == idProducto);

	        total = carrito.stream().mapToDouble(detalle -> detalle.getSubtotal()).sum();

	        return "redirect:/carrito";
	    }
	}
	
	
	
}
